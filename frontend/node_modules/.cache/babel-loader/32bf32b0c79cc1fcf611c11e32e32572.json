{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useRef, useEffect, useCallback } from 'react';\nexport const useStateWithCallback = intialState => {\n  _s();\n\n  const [state, setState] = useState(intialState);\n  const cbRef = useRef(null);\n  const updateState = useCallback((newState, cb) => {\n    cbRef.current = cb;\n    setState(prev => typeof newState === 'function' ? newState(prev) : newState);\n  }, []);\n  useEffect(() => {\n    if (cbRef.current) {\n      cbRef.current(state);\n      cbRef.current = null;\n    }\n  }, [state]);\n  return [state, updateState];\n};\n\n_s(useStateWithCallback, \"T7wt2anvVRlbRiyFIfcF8rxebBw=\");","map":{"version":3,"sources":["C:/Users/neha/Downloads/codershouse-mern-prep/frontend/src/hooks/useStateWithCallback.js"],"names":["useState","useRef","useEffect","useCallback","useStateWithCallback","intialState","state","setState","cbRef","updateState","newState","cb","current","prev"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,MAAnB,EAA2BC,SAA3B,EAAsCC,WAAtC,QAAyD,OAAzD;AACA,OAAO,MAAMC,oBAAoB,GAAIC,WAAD,IAAiB;AAAA;;AACjD,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAACK,WAAD,CAAlC;AACA,QAAMG,KAAK,GAAGP,MAAM,CAAC,IAAD,CAApB;AAEA,QAAMQ,WAAW,GAAGN,WAAW,CAAC,CAACO,QAAD,EAAWC,EAAX,KAAkB;AAC9CH,IAAAA,KAAK,CAACI,OAAN,GAAgBD,EAAhB;AAEAJ,IAAAA,QAAQ,CAAEM,IAAD,IACL,OAAOH,QAAP,KAAoB,UAApB,GAAiCA,QAAQ,CAACG,IAAD,CAAzC,GAAkDH,QAD9C,CAAR;AAGH,GAN8B,EAM5B,EAN4B,CAA/B;AAQAR,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIM,KAAK,CAACI,OAAV,EAAmB;AACfJ,MAAAA,KAAK,CAACI,OAAN,CAAcN,KAAd;AACAE,MAAAA,KAAK,CAACI,OAAN,GAAgB,IAAhB;AACH;AACJ,GALQ,EAKN,CAACN,KAAD,CALM,CAAT;AAOA,SAAO,CAACA,KAAD,EAAQG,WAAR,CAAP;AACH,CApBM;;GAAML,oB","sourcesContent":["import { useState, useRef, useEffect, useCallback } from 'react';\nexport const useStateWithCallback = (intialState) => {\n    const [state, setState] = useState(intialState);\n    const cbRef = useRef(null);\n\n    const updateState = useCallback((newState, cb) => {\n        cbRef.current = cb;\n\n        setState((prev) =>\n            typeof newState === 'function' ? newState(prev) : newState\n        );\n    }, []);\n\n    useEffect(() => {\n        if (cbRef.current) {\n            cbRef.current(state);\n            cbRef.current = null;\n        }\n    }, [state]);\n\n    return [state, updateState];\n};\n"]},"metadata":{},"sourceType":"module"}