[{"C:\\Users\\neha\\Desktop\\Live_Voice_Rooms\\frontend\\src\\index.js":"1","C:\\Users\\neha\\Desktop\\Live_Voice_Rooms\\frontend\\src\\App.js":"2","C:\\Users\\neha\\Desktop\\Live_Voice_Rooms\\frontend\\src\\reportWebVitals.js":"3","C:\\Users\\neha\\Desktop\\Live_Voice_Rooms\\frontend\\src\\store\\index.js":"4","C:\\Users\\neha\\Desktop\\Live_Voice_Rooms\\frontend\\src\\hooks\\useLoadingWithRefresh.js":"5","C:\\Users\\neha\\Desktop\\Live_Voice_Rooms\\frontend\\src\\components\\shared\\Loader\\Loader.js":"6","C:\\Users\\neha\\Desktop\\Live_Voice_Rooms\\frontend\\src\\pages\\Authenticate\\Authenticate.jsx":"7","C:\\Users\\neha\\Desktop\\Live_Voice_Rooms\\frontend\\src\\pages\\Home\\Home.jsx":"8","C:\\Users\\neha\\Desktop\\Live_Voice_Rooms\\frontend\\src\\pages\\Rooms\\Rooms.jsx":"9","C:\\Users\\neha\\Desktop\\Live_Voice_Rooms\\frontend\\src\\pages\\Activate\\Activate.jsx":"10","C:\\Users\\neha\\Desktop\\Live_Voice_Rooms\\frontend\\src\\pages\\Room\\Room.jsx":"11","C:\\Users\\neha\\Desktop\\Live_Voice_Rooms\\frontend\\src\\components\\shared\\Navigation\\Navigation.jsx":"12","C:\\Users\\neha\\Desktop\\Live_Voice_Rooms\\frontend\\src\\store\\activateSlice.js":"13","C:\\Users\\neha\\Desktop\\Live_Voice_Rooms\\frontend\\src\\store\\authSlice.js":"14","C:\\Users\\neha\\Desktop\\Live_Voice_Rooms\\frontend\\src\\hooks\\useWebRTC.js":"15","C:\\Users\\neha\\Desktop\\Live_Voice_Rooms\\frontend\\src\\components\\shared\\Card\\Card.jsx":"16","C:\\Users\\neha\\Desktop\\Live_Voice_Rooms\\frontend\\src\\components\\shared\\Button\\Button.jsx":"17","C:\\Users\\neha\\Desktop\\Live_Voice_Rooms\\frontend\\src\\components\\RoomCard\\RoomCard.jsx":"18","C:\\Users\\neha\\Desktop\\Live_Voice_Rooms\\frontend\\src\\components\\AddRoomModal\\AddRoomModal.jsx":"19","C:\\Users\\neha\\Desktop\\Live_Voice_Rooms\\frontend\\src\\pages\\Steps\\StepPhoneEmail\\StepPhoneEmail.jsx":"20","C:\\Users\\neha\\Desktop\\Live_Voice_Rooms\\frontend\\src\\pages\\Steps\\StepName\\StepName.jsx":"21","C:\\Users\\neha\\Desktop\\Live_Voice_Rooms\\frontend\\src\\pages\\Steps\\StepOtp\\StepOtp.jsx":"22","C:\\Users\\neha\\Desktop\\Live_Voice_Rooms\\frontend\\src\\pages\\Steps\\StepAvatar\\StepAvatar.jsx":"23","C:\\Users\\neha\\Desktop\\Live_Voice_Rooms\\frontend\\src\\http\\index.js":"24","C:\\Users\\neha\\Desktop\\Live_Voice_Rooms\\frontend\\src\\actions.js":"25","C:\\Users\\neha\\Desktop\\Live_Voice_Rooms\\frontend\\src\\hooks\\useStateWithCallback.js":"26","C:\\Users\\neha\\Desktop\\Live_Voice_Rooms\\frontend\\src\\components\\shared\\TextInput\\TextInput.jsx":"27","C:\\Users\\neha\\Desktop\\Live_Voice_Rooms\\frontend\\src\\pages\\Steps\\StepPhoneEmail\\Phone\\Phone.jsx":"28","C:\\Users\\neha\\Desktop\\Live_Voice_Rooms\\frontend\\src\\pages\\Steps\\StepPhoneEmail\\Email\\Email.jsx":"29","C:\\Users\\neha\\Desktop\\Live_Voice_Rooms\\frontend\\src\\socket\\index.js":"30"},{"size":406,"mtime":1641846115000,"results":"31","hashOfConfig":"32"},{"size":3681,"mtime":1641846115000,"results":"33","hashOfConfig":"32"},{"size":362,"mtime":1641846115000,"results":"34","hashOfConfig":"32"},{"size":220,"mtime":1641846115000,"results":"35","hashOfConfig":"32"},{"size":820,"mtime":1641846115000,"results":"36","hashOfConfig":"32"},{"size":1036,"mtime":1641846115000,"results":"37","hashOfConfig":"32"},{"size":447,"mtime":1641846115000,"results":"38","hashOfConfig":"32"},{"size":1414,"mtime":1648924305098,"results":"39","hashOfConfig":"32"},{"size":5334,"mtime":1648909948552,"results":"40","hashOfConfig":"32"},{"size":504,"mtime":1641846115000,"results":"41","hashOfConfig":"32"},{"size":4492,"mtime":1641846115000,"results":"42","hashOfConfig":"32"},{"size":2076,"mtime":1648908239961,"results":"43","hashOfConfig":"32"},{"size":501,"mtime":1641846115000,"results":"44","hashOfConfig":"32"},{"size":798,"mtime":1641846115000,"results":"45","hashOfConfig":"32"},{"size":9932,"mtime":1641846115000,"results":"46","hashOfConfig":"32"},{"size":450,"mtime":1641846115000,"results":"47","hashOfConfig":"32"},{"size":415,"mtime":1641846115000,"results":"48","hashOfConfig":"32"},{"size":1679,"mtime":1641846115000,"results":"49","hashOfConfig":"32"},{"size":3349,"mtime":1641846115000,"results":"50","hashOfConfig":"32"},{"size":1473,"mtime":1641846115000,"results":"51","hashOfConfig":"32"},{"size":1273,"mtime":1648910265367,"results":"52","hashOfConfig":"32"},{"size":1728,"mtime":1641846115000,"results":"53","hashOfConfig":"32"},{"size":2728,"mtime":1641846115000,"results":"54","hashOfConfig":"32"},{"size":1484,"mtime":1641846115000,"results":"55","hashOfConfig":"32"},{"size":304,"mtime":1641846115000,"results":"56","hashOfConfig":"32"},{"size":597,"mtime":1641846115000,"results":"57","hashOfConfig":"32"},{"size":433,"mtime":1648913292081,"results":"58","hashOfConfig":"32"},{"size":1461,"mtime":1641846115000,"results":"59","hashOfConfig":"32"},{"size":1010,"mtime":1641846115000,"results":"60","hashOfConfig":"32"},{"size":316,"mtime":1641846115000,"results":"61","hashOfConfig":"32"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},"1uqixg8",{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"64"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"64"},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"64"},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"112","messages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"114","messages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"116","messages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"118","messages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"120","messages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"122","messages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"124","messages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},"C:\\Users\\neha\\Desktop\\Live_Voice_Rooms\\frontend\\src\\index.js",[],["126","127"],"C:\\Users\\neha\\Desktop\\Live_Voice_Rooms\\frontend\\src\\App.js",[],"C:\\Users\\neha\\Desktop\\Live_Voice_Rooms\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\neha\\Desktop\\Live_Voice_Rooms\\frontend\\src\\store\\index.js",[],"C:\\Users\\neha\\Desktop\\Live_Voice_Rooms\\frontend\\src\\hooks\\useLoadingWithRefresh.js",["128"],"import { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useDispatch } from 'react-redux';\nimport { setAuth } from '../store/authSlice';\nexport function useLoadingWithRefresh() {\n    const [loading, setLoading] = useState(true);\n    const dispatch = useDispatch();\n    useEffect(() => {\n        (async () => {\n            try {\n                const { data } = await axios.get(\n                    `${process.env.REACT_APP_API_URL}/api/refresh`,\n                    {\n                        withCredentials: true,\n                    }\n                );\n                dispatch(setAuth(data));\n                setLoading(false);\n            } catch (err) {\n                console.log(err);\n                setLoading(false);\n            }\n        })();\n    }, []);\n\n    return { loading };\n}\n","C:\\Users\\neha\\Desktop\\Live_Voice_Rooms\\frontend\\src\\components\\shared\\Loader\\Loader.js",[],"C:\\Users\\neha\\Desktop\\Live_Voice_Rooms\\frontend\\src\\pages\\Authenticate\\Authenticate.jsx",[],"C:\\Users\\neha\\Desktop\\Live_Voice_Rooms\\frontend\\src\\pages\\Home\\Home.jsx",[],"C:\\Users\\neha\\Desktop\\Live_Voice_Rooms\\frontend\\src\\pages\\Rooms\\Rooms.jsx",[],"C:\\Users\\neha\\Desktop\\Live_Voice_Rooms\\frontend\\src\\pages\\Activate\\Activate.jsx",[],"C:\\Users\\neha\\Desktop\\Live_Voice_Rooms\\frontend\\src\\pages\\Room\\Room.jsx",["129","130"],"import React, { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useWebRTC } from '../../hooks/useWebRTC';\nimport { useParams, useHistory } from 'react-router-dom';\nimport { getRoom } from '../../http';\n\nimport styles from './Room.module.css';\n\nconst Room = () => {\n    const user = useSelector((state) => state.auth.user);\n    const { id: roomId } = useParams();\n    const [room, setRoom] = useState(null);\n\n    const { clients, provideRef, handleMute, localStream } = useWebRTC(\n        roomId,\n        user\n    );\n\n    const history = useHistory();\n\n    const [isMuted, setMuted] = useState(true);\n\n    useEffect(() => {\n        const fetchRoom = async () => {\n            const { data } = await getRoom(roomId);\n            setRoom((prev) => data);\n        };\n\n        fetchRoom();\n    }, [roomId]);\n\n    useEffect(() => {\n        handleMute(isMuted, user.id);\n    }, [isMuted]);\n\n    const handManualLeave = () => {\n        history.push('/rooms');\n    };\n\n    const handleMuteClick = (clientId) => {\n        if (clientId !== user.id) return;\n        setMuted((prev) => !prev);\n    };\n\n    return (\n        <div>\n            <div className=\"container\">\n                <button onClick={handManualLeave} className={styles.goBack}>\n                    <img src=\"/images/arrow-left.png\" alt=\"arrow-left\" />\n                    <span>All voice rooms</span>\n                </button>\n            </div>\n            <div className={styles.clientsWrap}>\n                <div className={styles.header}>\n                    {room && <h2 className={styles.topic}>{room.topic}</h2>}\n                    <div className={styles.actions}>\n                        <button className={styles.actionBtn}>\n                            <img src=\"/images/palm.png\" alt=\"palm-icon\" />\n                        </button>\n                        <button\n                            onClick={handManualLeave}\n                            className={styles.actionBtn}\n                        >\n                            <img src=\"/images/win.png\" alt=\"win-icon\" />\n                            <span>Leave quietly</span>\n                        </button>\n                    </div>\n                </div>\n                <div className={styles.clientsList}>\n                    {clients.map((client) => {\n                        return (\n                            <div className={styles.client} key={client.id}>\n                                <div className={styles.userHead}>\n                                    <img\n                                        className={styles.userAvatar}\n                                        src={client.avatar}\n                                        alt=\"\"\n                                    />\n                                    <audio\n                                        autoPlay\n                                        playsInline\n                                        ref={(instance) => {\n                                            provideRef(instance, client.id);\n                                        }}\n                                    />\n                                    <button\n                                        onClick={() =>\n                                            handleMuteClick(client.id)\n                                        }\n                                        className={styles.micBtn}\n                                    >\n                                        {client.muted ? (\n                                            <img\n                                                className={styles.mic}\n                                                src=\"/images/mic-mute.png\"\n                                                alt=\"mic\"\n                                            />\n                                        ) : (\n                                            <img\n                                                className={styles.micImg}\n                                                src=\"/images/mic.png\"\n                                                alt=\"mic\"\n                                            />\n                                        )}\n                                    </button>\n                                </div>\n                                <h4>{client.name}</h4>\n                            </div>\n                        );\n                    })}\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Room;\n","C:\\Users\\neha\\Desktop\\Live_Voice_Rooms\\frontend\\src\\components\\shared\\Navigation\\Navigation.jsx",[],"C:\\Users\\neha\\Desktop\\Live_Voice_Rooms\\frontend\\src\\store\\activateSlice.js",[],"C:\\Users\\neha\\Desktop\\Live_Voice_Rooms\\frontend\\src\\store\\authSlice.js",[],"C:\\Users\\neha\\Desktop\\Live_Voice_Rooms\\frontend\\src\\hooks\\useWebRTC.js",["131","132","133","134","135","136"],"import { useEffect, useState, useRef, useCallback } from 'react';\nimport { ACTIONS } from '../actions';\nimport socketInit from '../socket';\nimport freeice from 'freeice';\nimport { useStateWithCallback } from './useStateWithCallback';\n\nexport const useWebRTC = (roomId, user) => {\n    const [clients, setClients] = useStateWithCallback([]);\n    const audioElements = useRef({});\n    const connections = useRef({});\n    const socket = useRef(null);\n    const localMediaStream = useRef(null);\n    const clientsRef = useRef([]);\n\n    const addNewClient = useCallback(\n        (newClient, cb) => {\n            const lookingFor = clients.find(\n                (client) => client.id === newClient.id\n            );\n\n            console.log('clients', clients, lookingFor);\n            if (lookingFor === undefined) {\n                setClients(\n                    (existingClients) => [...existingClients, newClient],\n                    cb\n                );\n            }\n        },\n        [clients, setClients]\n    );\n\n    useEffect(() => {\n        socket.current = socketInit();\n    }, []);\n\n    // Handle new peer\n\n    useEffect(() => {\n        const handleNewPeer = async ({\n            peerId,\n            createOffer,\n            user: remoteUser,\n        }) => {\n            // If already connected then prevent connecting again\n            if (peerId in connections.current) {\n                return console.warn(\n                    `You are already connected with ${peerId} (${user.name})`\n                );\n            }\n\n            // Store it to connections\n            connections.current[peerId] = new RTCPeerConnection({\n                iceServers: freeice(),\n            });\n\n            // Handle new ice candidate on this peer connection\n            connections.current[peerId].onicecandidate = (event) => {\n                socket.current.emit(ACTIONS.RELAY_ICE, {\n                    peerId,\n                    icecandidate: event.candidate,\n                });\n            };\n\n            // Handle on track event on this connection\n            connections.current[peerId].ontrack = ({\n                streams: [remoteStream],\n            }) => {\n                addNewClient({ ...remoteUser, muted: true }, () => {\n                    // console.log('peer', audioElements.current, peerId);\n\n                    if (audioElements.current[remoteUser.id]) {\n                        audioElements.current[remoteUser.id].srcObject =\n                            remoteStream;\n                    } else {\n                        let settled = false;\n                        const interval = setInterval(() => {\n                            if (audioElements.current[remoteUser.id]) {\n                                audioElements.current[remoteUser.id].srcObject =\n                                    remoteStream;\n                                settled = true;\n                            }\n\n                            if (settled) {\n                                clearInterval(interval);\n                            }\n                        }, 1000);\n                    }\n                });\n            };\n\n            // Add connection to peer connections track\n            localMediaStream.current.getTracks().forEach((track) => {\n                connections.current[peerId].addTrack(\n                    track,\n                    localMediaStream.current\n                );\n            });\n\n            // Create an offer if required\n            if (createOffer) {\n                const offer = await connections.current[peerId].createOffer();\n\n                // Set as local description\n                await connections.current[peerId].setLocalDescription(offer);\n\n                // send offer to the server\n                socket.current.emit(ACTIONS.RELAY_SDP, {\n                    peerId,\n                    sessionDescription: offer,\n                });\n            }\n        };\n\n        // Listen for add peer event from ws\n        socket.current.on(ACTIONS.ADD_PEER, handleNewPeer);\n        return () => {\n            socket.current.off(ACTIONS.ADD_PEER);\n        };\n    }, [clients]);\n\n    useEffect(() => {\n        const startCapture = async () => {\n            // Start capturing local audio stream.\n\n            localMediaStream.current =\n                await navigator.mediaDevices.getUserMedia({\n                    audio: true,\n                });\n        };\n\n        startCapture().then(() => {\n            // add user to clients list\n            addNewClient({ ...user, muted: true }, () => {\n                const localElement = audioElements.current[user.id];\n                if (localElement) {\n                    localElement.volume = 0;\n                    localElement.srcObject = localMediaStream.current;\n                }\n            });\n\n            // Emit the action to join\n            socket.current.emit(ACTIONS.JOIN, {\n                roomId,\n                user,\n            });\n        });\n\n        // Leaving the room\n        return () => {\n            localMediaStream.current\n                .getTracks()\n                .forEach((track) => track.stop());\n            socket.current.emit(ACTIONS.LEAVE, { roomId });\n        };\n    }, []);\n\n    // Handle ice candidate\n    useEffect(() => {\n        socket.current.on(ACTIONS.ICE_CANDIDATE, ({ peerId, icecandidate }) => {\n            // console.log('ices', connections.current[peerId]);\n            if (icecandidate) {\n                connections.current[peerId].addIceCandidate(icecandidate);\n            }\n        });\n\n        return () => {\n            socket.current.off(ACTIONS.ICE_CANDIDATE);\n        };\n    }, []);\n\n    // Handle session description\n\n    useEffect(() => {\n        const setRemoteMedia = async ({\n            peerId,\n            sessionDescription: remoteSessionDescription,\n        }) => {\n            connections.current[peerId].setRemoteDescription(\n                new RTCSessionDescription(remoteSessionDescription)\n            );\n\n            // If session descrition is offer then create an answer\n            if (remoteSessionDescription.type === 'offer') {\n                const connection = connections.current[peerId];\n\n                const answer = await connection.createAnswer();\n                connection.setLocalDescription(answer);\n\n                socket.current.emit(ACTIONS.RELAY_SDP, {\n                    peerId,\n                    sessionDescription: answer,\n                });\n            }\n        };\n\n        socket.current.on(ACTIONS.SESSION_DESCRIPTION, setRemoteMedia);\n        return () => {\n            socket.current.off(ACTIONS.SESSION_DESCRIPTION);\n        };\n    }, []);\n\n    useEffect(() => {\n        window.addEventListener('unload', function () {\n            alert('leaving');\n            socket.current.emit(ACTIONS.LEAVE, { roomId });\n        });\n    }, []);\n\n    useEffect(() => {\n        const handleRemovePeer = ({ peerID, userId }) => {\n            console.log('leaving', peerID, userId);\n\n            if (connections.current[peerID]) {\n                connections.current[peerID].close();\n            }\n\n            delete connections.current[peerID];\n            delete audioElements.current[peerID];\n\n            setClients((list) => list.filter((c) => c.id !== userId));\n        };\n\n        socket.current.on(ACTIONS.REMOVE_PEER, handleRemovePeer);\n\n        return () => {\n            socket.current.off(ACTIONS.REMOVE_PEER);\n        };\n    }, []);\n\n    useEffect(() => {\n        // handle mute and unmute\n        socket.current.on(ACTIONS.MUTE, ({ peerId, userId }) => {\n            console.log('muting', userId);\n            setMute(true, userId);\n        });\n\n        socket.current.on(ACTIONS.UNMUTE, ({ peerId, userId }) => {\n            console.log('unmuting', userId);\n            setMute(false, userId);\n        });\n\n        const setMute = (mute, userId) => {\n            const clientIdx = clientsRef.current\n                .map((client) => client.id)\n                .indexOf(userId);\n\n            console.log('idx', clientIdx);\n\n            // const connectedClients = clientsRef.current.filter(\n            //     (client) => client.id !== userId\n            // );\n\n            const connectedClientsClone = JSON.parse(\n                JSON.stringify(clientsRef.current)\n            );\n\n            if (clientIdx > -1) {\n                connectedClientsClone[clientIdx].muted = mute;\n                console.log('muuuu', connectedClientsClone);\n                setClients((_) => connectedClientsClone);\n            }\n        };\n    }, []);\n\n    const provideRef = (instance, userId) => {\n        audioElements.current[userId] = instance;\n    };\n\n    useEffect(() => {\n        clientsRef.current = clients;\n    }, [clients]);\n\n    const handleMute = (isMute, userId) => {\n        let settled = false;\n\n        if (userId === user.id) {\n            let interval = setInterval(() => {\n                if (localMediaStream.current) {\n                    localMediaStream.current.getTracks()[0].enabled = !isMute;\n                    if (isMute) {\n                        socket.current.emit(ACTIONS.MUTE, {\n                            roomId,\n                            userId: user.id,\n                        });\n                    } else {\n                        socket.current.emit(ACTIONS.UNMUTE, {\n                            roomId,\n                            userId: user.id,\n                        });\n                    }\n                    // console.log(\n                    //     'localMediaStream ',\n                    //     localMediaStream.current.getTracks()\n                    // );\n                    settled = true;\n                }\n                if (settled) {\n                    clearInterval(interval);\n                }\n            }, 200);\n        }\n    };\n\n    return {\n        clients,\n        provideRef,\n        handleMute,\n        localStream: localMediaStream.current,\n    };\n};\n","C:\\Users\\neha\\Desktop\\Live_Voice_Rooms\\frontend\\src\\components\\shared\\Card\\Card.jsx",[],"C:\\Users\\neha\\Desktop\\Live_Voice_Rooms\\frontend\\src\\components\\shared\\Button\\Button.jsx",[],"C:\\Users\\neha\\Desktop\\Live_Voice_Rooms\\frontend\\src\\components\\RoomCard\\RoomCard.jsx",[],"C:\\Users\\neha\\Desktop\\Live_Voice_Rooms\\frontend\\src\\components\\AddRoomModal\\AddRoomModal.jsx",[],"C:\\Users\\neha\\Desktop\\Live_Voice_Rooms\\frontend\\src\\pages\\Steps\\StepPhoneEmail\\StepPhoneEmail.jsx",[],"C:\\Users\\neha\\Desktop\\Live_Voice_Rooms\\frontend\\src\\pages\\Steps\\StepName\\StepName.jsx",[],"C:\\Users\\neha\\Desktop\\Live_Voice_Rooms\\frontend\\src\\pages\\Steps\\StepOtp\\StepOtp.jsx",[],"C:\\Users\\neha\\Desktop\\Live_Voice_Rooms\\frontend\\src\\pages\\Steps\\StepAvatar\\StepAvatar.jsx",[],"C:\\Users\\neha\\Desktop\\Live_Voice_Rooms\\frontend\\src\\http\\index.js",[],"C:\\Users\\neha\\Desktop\\Live_Voice_Rooms\\frontend\\src\\actions.js",[],"C:\\Users\\neha\\Desktop\\Live_Voice_Rooms\\frontend\\src\\hooks\\useStateWithCallback.js",[],"C:\\Users\\neha\\Desktop\\Live_Voice_Rooms\\frontend\\src\\components\\shared\\TextInput\\TextInput.jsx",[],"C:\\Users\\neha\\Desktop\\Live_Voice_Rooms\\frontend\\src\\pages\\Steps\\StepPhoneEmail\\Phone\\Phone.jsx",[],"C:\\Users\\neha\\Desktop\\Live_Voice_Rooms\\frontend\\src\\pages\\Steps\\StepPhoneEmail\\Email\\Email.jsx",[],"C:\\Users\\neha\\Desktop\\Live_Voice_Rooms\\frontend\\src\\socket\\index.js",[],{"ruleId":"137","replacedBy":"138"},{"ruleId":"139","replacedBy":"140"},{"ruleId":"141","severity":1,"message":"142","line":24,"column":8,"nodeType":"143","endLine":24,"endColumn":10,"suggestions":"144"},{"ruleId":"145","severity":1,"message":"146","line":14,"column":46,"nodeType":"147","messageId":"148","endLine":14,"endColumn":57},{"ruleId":"141","severity":1,"message":"149","line":34,"column":8,"nodeType":"143","endLine":34,"endColumn":17,"suggestions":"150"},{"ruleId":"145","severity":1,"message":"151","line":1,"column":21,"nodeType":"147","messageId":"148","endLine":1,"endColumn":29},{"ruleId":"141","severity":1,"message":"152","line":119,"column":8,"nodeType":"143","endLine":119,"endColumn":17,"suggestions":"153"},{"ruleId":"141","severity":1,"message":"154","line":155,"column":8,"nodeType":"143","endLine":155,"endColumn":10,"suggestions":"155"},{"ruleId":"141","severity":1,"message":"156","line":207,"column":8,"nodeType":"143","endLine":207,"endColumn":10,"suggestions":"157"},{"ruleId":"141","severity":1,"message":"158","line":228,"column":8,"nodeType":"143","endLine":228,"endColumn":10,"suggestions":"159"},{"ruleId":"141","severity":1,"message":"158","line":263,"column":8,"nodeType":"143","endLine":263,"endColumn":10,"suggestions":"160"},"no-native-reassign",["161"],"no-negated-in-lhs",["162"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["163"],"no-unused-vars","'localStream' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has missing dependencies: 'handleMute' and 'user.id'. Either include them or remove the dependency array.",["164"],"'useState' is defined but never used.","React Hook useEffect has missing dependencies: 'addNewClient' and 'user.name'. Either include them or remove the dependency array.",["165"],"React Hook useEffect has missing dependencies: 'addNewClient', 'roomId', and 'user'. Either include them or remove the dependency array.",["166"],"React Hook useEffect has a missing dependency: 'roomId'. Either include it or remove the dependency array.",["167"],"React Hook useEffect has a missing dependency: 'setClients'. Either include it or remove the dependency array.",["168"],["169"],"no-global-assign","no-unsafe-negation",{"desc":"170","fix":"171"},{"desc":"172","fix":"173"},{"desc":"174","fix":"175"},{"desc":"176","fix":"177"},{"desc":"178","fix":"179"},{"desc":"180","fix":"181"},{"desc":"180","fix":"182"},"Update the dependencies array to be: [dispatch]",{"range":"183","text":"184"},"Update the dependencies array to be: [handleMute, isMuted, user.id]",{"range":"185","text":"186"},"Update the dependencies array to be: [addNewClient, clients, user.name]",{"range":"187","text":"188"},"Update the dependencies array to be: [addNewClient, roomId, user]",{"range":"189","text":"190"},"Update the dependencies array to be: [roomId]",{"range":"191","text":"192"},"Update the dependencies array to be: [setClients]",{"range":"193","text":"194"},{"range":"195","text":"194"},[788,790],"[dispatch]",[911,920],"[handleMute, isMuted, user.id]",[4114,4123],"[addNewClient, clients, user.name]",[5207,5209],"[addNewClient, roomId, user]",[6843,6845],"[roomId]",[7441,7443],"[setClients]",[8545,8547]]